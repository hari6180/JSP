/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.41
 * Generated at: 2021-01-22 02:56:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._03_005fpost;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import study.jsp.model1.helper.RegexHelper;
import study.jsp.model1.helper.WebHelper;

public final class q02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("study.jsp.model1.helper.RegexHelper");
    _jspx_imports_classes.add("study.jsp.model1.helper.WebHelper");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	// WebHelper 객체 생성
	WebHelper webHelper = WebHelper.getInstance(request, response);

	// RegexHelper 객체 생성
	RegexHelper regexHelper = RegexHelper.getInstance();
	
	// POST 파라미터 수신. 값이 없을 경우 기본값 null이 리턴됨
	String userName = request.getParameter("user_name");
	String userEmail = request.getParameter("user_email");
	String userTel = request.getParameter("user_tel");
	
	// 이름에 대한 값이 없다면 메시지 출력 후 이전 페이지로 강제 이동 후 종료(return)
	if (!regexHelper.isValue(userName)) {
		webHelper.redirect(null, "이름을 입력하세요.");
		return;
	}
	
	// 이름이 한글 이외의 글자가 포함되어 있다면 메시지 출력 후 이전 페이지로 강제 이동 후 종료(return)
	if (!regexHelper.isKor(userName)) {
		webHelper.redirect(null, "이름은 한글만 입력 가능합니다.");
		return;
	}
	
	// 이메일에 대한 값이 없다면 메시지 출력 후 이전 페이지로 강제 이동 후 종료(return)
		if (!regexHelper.isValue(userEmail)) {
		webHelper.redirect(null, "이메일을 입력하세요.");
		return;
	}
	
	// 이메일 형식이 잘못되었다면 메시지 출력 후 이전 페이지로 강제 이동 후 종료(return)
		if (!regexHelper.isEmail(userEmail)) {
		webHelper.redirect(null, "이메일 형식이 잘못되었습니다.");
		return;
	}
	
	
	// 연락처가 입력되지 않았다면 메시지 출력 후 이전 페이지로 강제 이동 후 종료(return)
		if (!regexHelper.isValue(userTel)) {
		webHelper.redirect(null, "연락처를 입력하세요.");
		return;
	}
	
	// 연락처가 핸드폰 형식도 아니고 집전화 형식도 아니라면 메시지 출력 후 이전 페이지로 강제 이동 후 종료(return)
		if (!regexHelper.isCellphone(userTel) && !regexHelper.isTel(userTel)) {
		webHelper.redirect(null, "연락처 형식이 잘못되었습니다.");
		return;
	}
	

      out.write("<!doctype html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\" />\r\n");
      out.write("    <title>Hello JSP</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>간단 설문조사 2/3</h1>\r\n");
      out.write("    <h2>성별 선택</h2>\r\n");
      out.write("    \r\n");
      out.write("    <form name=\"myform\" method=\"post\" action=\"");
      out.print(request.getContextPath());
      out.write("/03_post/q03.jsp\">\r\n");
      out.write("    \t<!-- 이전 화면에서 넘어온 값에 대한 상태 유지 -->\r\n");
      out.write("    \t<input type=\"hidden\" name=\"user_name\" value=\"");
      out.print(userName);
      out.write("\" />\r\n");
      out.write("    \t<input type=\"hidden\" name=\"user_email\" value=\"");
      out.print(userEmail);
      out.write("\" />\r\n");
      out.write("    \t<input type=\"hidden\" name=\"user_tel\" value=\"");
      out.print(userTel);
      out.write("\" />\r\n");
      out.write("    \t\r\n");
      out.write("    \t<!-- 설문 항목 -->\r\n");
      out.write("    \t<div>\r\n");
      out.write("\t\t\t<label> <input type=\"radio\" name=\"gender\" value=\"남자\"> 남자 </label>\r\n");
      out.write("\t\t\t<label> <input type=\"radio\" name=\"gender\" value=\"여자\" checked> 여자 </label>\r\n");
      out.write("    \t</div>\r\n");
      out.write("    \t<button type=\"submit\">다음단계</button>\r\n");
      out.write("    </form>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
